{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\gitHubSamples\\\\test-react-to-do-app\\\\client\\\\src\\\\components\\\\todo\\\\TodoList.js\";\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { removeTodo, getTodo, changeTodoStatus } from '../../actions/todo';\n\nconst TodoList = ({\n  todos,\n  removeTodo,\n  changeTodoStatus,\n  getTodo,\n  inputRef,\n  todo: {\n    currentTodo\n  }\n}) => {\n  const statusChangeHandler = todo => {\n    changeTodoStatus(todo._id, {\n      status: todo.status\n    }); // must send status as object to express.\n  };\n\n  const removeTodoHandler = id => {\n    removeTodo(id);\n  };\n\n  const editTodoHandler = todo => {\n    inputRef.current.focus();\n    getTodo(todo);\n  };\n\n  const classNameHandler = status => {\n    switch (status) {\n      case 'not completed':\n        return ['Todo!', 'TodoList__red', 'TodoList__uncompleted'];\n\n      case 'completed':\n        return ['Completed', 'TodoList__green', 'TodoList__completed'];\n\n      case 'in progress':\n        return ['In Progress', 'TodoList__blue', 'TodoList__inprogress'];\n\n      default:\n        return ['Todo!', 'TodoList__red', 'TodoList__uncompleted'];\n    }\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"TodoList__count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, todos && todos.length > 0 ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \" ToDos completed:\", React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, todos.filter(todo => todo.completed === true).length, \" of \", todos.length)) : React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \" No tasks left... yay!\")), React.createElement(\"ul\", {\n    className: \"TodoList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, todos && todos.map(todo => React.createElement(\"li\", {\n    key: todo._id,\n    className: \"TodoList \".concat(classNameHandler(todo.status)[1], \" \"),\n    onDoubleClick: statusChangeHandler.bind(this, todo),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, currentTodo && currentTodo._id === todo._id ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \" ( Editing... ) \") : null, React.createElement(\"div\", {\n    className: \"TodoList__text \".concat(currentTodo && currentTodo._id === todo._id ? 'TodoList__text-editing' : '', \" \"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, todo.text), React.createElement(\"div\", {\n    className: classNameHandler(todo.status)[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, classNameHandler(todo.status)[0]), React.createElement(\"div\", {\n    className: \"TodoList__tasks\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"TodoList__remove\",\n    onClick: removeTodoHandler.bind(this, todo._id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"TodoList__img\",\n    src: \"https://icon.now.sh/close\",\n    alt: \"delete icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"TodoList__edit\",\n    onClick: editTodoHandler.bind(this, todo),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"TodoList__img\",\n    src: \"https://icon.now.sh/edit\",\n    alt: \"Edit Icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })))))));\n};\n\nTodoList.propTypes = {\n  getTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todo: state.todo\n});\n\nexport default connect(mapStateToProps, {\n  removeTodo,\n  getTodo,\n  changeTodoStatus\n})(TodoList);","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\gitHubSamples\\test-react-to-do-app\\client\\src\\components\\todo\\TodoList.js"],"names":["React","Fragment","PropTypes","connect","removeTodo","getTodo","changeTodoStatus","TodoList","todos","inputRef","todo","currentTodo","statusChangeHandler","_id","status","removeTodoHandler","id","editTodoHandler","current","focus","classNameHandler","length","filter","completed","map","bind","text","propTypes","func","isRequired","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,gBAA9B,QAAsD,oBAAtD;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQJ,EAAAA,UAAR;AAAoBE,EAAAA,gBAApB;AAAsCD,EAAAA,OAAtC;AAA+CI,EAAAA,QAA/C;AAAyDC,EAAAA,IAAI,EAAE;AAAEC,IAAAA;AAAF;AAA/D,CAAD,KAAqF;AAElG,QAAMC,mBAAmB,GAAGF,IAAI,IAAI;AAChCJ,IAAAA,gBAAgB,CAACI,IAAI,CAACG,GAAN,EAAW;AAAEC,MAAAA,MAAM,EAAEJ,IAAI,CAACI;AAAf,KAAX,CAAhB,CADgC,CACqB;AACxD,GAFD;;AAIA,QAAMC,iBAAiB,GAAGC,EAAE,IAAI;AAC5BZ,IAAAA,UAAU,CAACY,EAAD,CAAV;AACH,GAFD;;AAIA,QAAMC,eAAe,GAAGP,IAAI,IAAI;AAC5BD,IAAAA,QAAQ,CAACS,OAAT,CAAiBC,KAAjB;AACAd,IAAAA,OAAO,CAACK,IAAD,CAAP;AACH,GAHD;;AAKA,QAAMU,gBAAgB,GAAGN,MAAM,IAAI;AAC/B,YAAQA,MAAR;AACI,WAAK,eAAL;AACI,eAAO,CAAC,OAAD,EAAS,eAAT,EAAyB,uBAAzB,CAAP;;AACJ,WAAK,WAAL;AACI,eAAO,CAAC,WAAD,EAAa,iBAAb,EAA+B,qBAA/B,CAAP;;AACJ,WAAK,aAAL;AACI,eAAO,CAAC,aAAD,EAAe,gBAAf,EAAgC,sBAAhC,CAAP;;AACJ;AACI,eAAO,CAAC,OAAD,EAAS,eAAT,EAAyB,uBAAzB,CAAP;AARR;AAUH,GAXD;;AAYA,SACA,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAG,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQN,KAAK,IAAIA,KAAK,CAACa,MAAN,GAAe,CAAxB,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAK,IAAA,SAAS,EAAG,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMb,KAAK,CAACc,MAAN,CAAaZ,IAAI,IAAIA,IAAI,CAACa,SAAL,KAAmB,IAAxC,EAA8CF,MADpD,UACkEb,KAAK,CAACa,MADxE,CADJ,CADJ,GAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BARZ,CADA,EAYC;AAAI,IAAA,SAAS,EAAG,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEWb,KAAK,IAAIA,KAAK,CAACgB,GAAN,CAAWd,IAAI,IACpB;AACI,IAAA,GAAG,EAAIA,IAAI,CAACG,GADhB;AAEI,IAAA,SAAS,qBAAgBO,gBAAgB,CAACV,IAAI,CAACI,MAAN,CAAhB,CAA8B,CAA9B,CAAhB,MAFb;AAGI,IAAA,aAAa,EAAKF,mBAAmB,CAACa,IAApB,CAAyB,IAAzB,EAA8Bf,IAA9B,CAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOOC,WAAW,IAAIA,WAAW,CAACE,GAAZ,KAAoBH,IAAI,CAACG,GAAxC,GACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADG,GAC2B,IARlC,EAYI;AACI,IAAA,SAAS,2BAAsBF,WAAW,IAAIA,WAAW,CAACE,GAAZ,KAAoBH,IAAI,CAACG,GAAxC,GAA8C,wBAA9C,GAAyE,EAA/F,MADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGMH,IAAI,CAACgB,IAHX,CAZJ,EAkBI;AAAK,IAAA,SAAS,EAAIN,gBAAgB,CAACV,IAAI,CAACI,MAAN,CAAhB,CAA8B,CAA9B,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsDM,gBAAgB,CAACV,IAAI,CAACI,MAAN,CAAhB,CAA8B,CAA9B,CAAtD,CAlBJ,EAoBK;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACO;AACI,IAAA,SAAS,EAAG,kBADhB;AAEI,IAAA,OAAO,EAAKC,iBAAiB,CAACU,IAAlB,CAAuB,IAAvB,EAA4Bf,IAAI,CAACG,GAAjC,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII;AAAK,IAAA,SAAS,EAAG,eAAjB;AAAiC,IAAA,GAAG,EAAC,2BAArC;AAAiE,IAAA,GAAG,EAAC,aAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADP,EAQO;AACI,IAAA,SAAS,EAAG,gBADhB;AAEI,IAAA,OAAO,EAAKI,eAAe,CAACQ,IAAhB,CAAqB,IAArB,EAA0Bf,IAA1B,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII;AAAK,IAAA,SAAS,EAAG,eAAjB;AAAiC,IAAA,GAAG,EAAC,0BAArC;AAAgE,IAAA,GAAG,EAAC,WAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CARP,CApBL,CADK,CAFpB,CAZD,CADA;AA4DH,CAvFD;;AAyFAH,QAAQ,CAACoB,SAAT,GAAqB;AACjBtB,EAAAA,OAAO,EAAEH,SAAS,CAAC0B,IAAV,CAAeC,UADP;AAEjBzB,EAAAA,UAAU,EAAEF,SAAS,CAAC0B,IAAV,CAAeC;AAFV,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BrB,EAAAA,IAAI,EAAEqB,KAAK,CAACrB;AADkB,CAAL,CAA7B;;AAIA,eAAeP,OAAO,CAAC2B,eAAD,EAAkB;AAAE1B,EAAAA,UAAF;AAAcC,EAAAA,OAAd;AAAuBC,EAAAA;AAAvB,CAAlB,CAAP,CAAoEC,QAApE,CAAf","sourcesContent":["import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { removeTodo, getTodo, changeTodoStatus } from '../../actions/todo';\r\n\r\nconst TodoList = ({todos, removeTodo, changeTodoStatus, getTodo, inputRef, todo: { currentTodo }}) => {\r\n\r\n    const statusChangeHandler = todo => {\r\n        changeTodoStatus(todo._id, { status: todo.status }); // must send status as object to express.\r\n    }\r\n\r\n    const removeTodoHandler = id => {\r\n        removeTodo(id);\r\n    }\r\n\r\n    const editTodoHandler = todo => {\r\n        inputRef.current.focus();\r\n        getTodo(todo);\r\n    }\r\n\r\n    const classNameHandler = status => {\r\n        switch( status ) {\r\n            case 'not completed':\r\n                return ['Todo!','TodoList__red','TodoList__uncompleted'];\r\n            case 'completed':\r\n                return ['Completed','TodoList__green','TodoList__completed'];\r\n            case 'in progress':\r\n                return ['In Progress','TodoList__blue','TodoList__inprogress'];\r\n            default:\r\n                return ['Todo!','TodoList__red','TodoList__uncompleted'];\r\n        }\r\n    }\r\n    return (\r\n    <Fragment>\r\n    <div className = \"TodoList__count\">\r\n        {\r\n            todos && todos.length > 0 ?\r\n                <h2> ToDos completed: \r\n                    <div className = \"\">\r\n                        { todos.filter(todo => todo.completed === true).length } of { todos.length }  \r\n                    </div>   \r\n                </h2> :\r\n                <h2> No tasks left... yay!</h2> \r\n        }\r\n    </div>\r\n     <ul className = \"TodoList\">\r\n            {\r\n                todos && todos.map( todo => (\r\n                    <li \r\n                        key = {todo._id}\r\n                        className = {`TodoList ${classNameHandler(todo.status)[1]} `}\r\n                        onDoubleClick = { statusChangeHandler.bind(this,todo) }\r\n                    > \r\n\r\n                       {\r\n                           currentTodo && currentTodo._id === todo._id ? \r\n                        <div> ( Editing... ) </div> : null\r\n                       }\r\n\r\n        \r\n                        <div \r\n                            className = {`TodoList__text ${currentTodo && currentTodo._id === todo._id ? 'TodoList__text-editing' : ''} `}\r\n                        > \r\n                            { todo.text } \r\n                        </div>\r\n         \r\n                        <div className = {classNameHandler(todo.status)[2]}>{ classNameHandler(todo.status)[0] }</div>  \r\n       \r\n                         <div className=\"TodoList__tasks\">\r\n                                <button \r\n                                    className = \"TodoList__remove\"\r\n                                    onClick = { removeTodoHandler.bind(this,todo._id) }\r\n                                >\r\n                                    <img className = \"TodoList__img\" src=\"https://icon.now.sh/close\" alt=\"delete icon\"/>\r\n                                </button>\r\n\r\n                                <button\r\n                                    className = \"TodoList__edit\"\r\n                                    onClick = { editTodoHandler.bind(this,todo) }\r\n                                >\r\n                                    <img className = \"TodoList__img\" src=\"https://icon.now.sh/edit\" alt=\"Edit Icon\"/>\r\n                                </button>\r\n                         </div>\r\n                       \r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n\r\n    </Fragment>\r\n       \r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    getTodo: PropTypes.func.isRequired,\r\n    removeTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    todo: state.todo\r\n})\r\n\r\nexport default connect(mapStateToProps, { removeTodo, getTodo, changeTodoStatus })(TodoList)\r\n"]},"metadata":{},"sourceType":"module"}